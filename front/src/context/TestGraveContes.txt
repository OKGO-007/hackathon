import React, { createContext, useContext, ReactNode, useEffect, useState } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, getDocs, QuerySnapshot, DocumentData } from 'firebase/firestore';
import { db, auth } from "../components/Firebase"; // Firebase設定ファイルのインポート
import { useAuthState } from 'react-firebase-hooks/auth';

// GraveDataの型定義
type GraveData = {
  id: string;
  imageUrl: string;
  animeInfo: string;
  animeId: string;
  characterName: string;
  characterId: string;
  visitors: number;
  isPublic: boolean;
  userId: string;
};

// GraveContextの型定義
interface GraveContextType {
  addGrave: (data: Omit<GraveData, 'userId'>) => Promise<void>;
  graves: GraveData[]; // お墓データの配列
}

// GraveContextの作成
const GraveContext = createContext<GraveContextType | undefined>(undefined);

// GraveProviderコンポーネントの定義
export const GraveProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user] = useAuthState(auth);
  const [graves, setGraves] = useState<GraveData[]>([]); // お墓データを管理するステート

  
  // getDocsを使ってドキュメントを取得
  const fetchGraves = async () => {
    if (!user) {
      console.error("User is not logged in.");
      return; // ユーザーが存在しない場合は何もせず終了
    }

    const userGravesRef = collection(db, user.uid); // ユーザーのUIDが存在する場合にコレクションのパスを修正
  
    try {
      const querySnapshot: QuerySnapshot<DocumentData> = await getDocs(userGravesRef); // Promiseを待機
      console.log("ggg",querySnapshot)
      const updatedData: GraveData[] = []; // GraveData[]型を指定
      querySnapshot.forEach((doc) => {
        // console.log(`${doc.id} => ${JSON.stringify(doc.data())}`);
        const dataG: GraveData = { id: doc.id, ...doc.data() } as GraveData;
        console.log("dataG",dataG)
        updatedData.push(dataG);
      });
      setGraves(updatedData);
    } catch (error) {
      console.error("Error fetching graves:", error);
    }
  };

  // Gravesのデータをリアルタイムで取得
  useEffect(() => {
    if (user) {
      const userGravesRef = collection(db, user.uid); // コレクションのパスを修正


      const a = query(collection(db, user.uid), orderBy('date', 'asc'));
      console.log("query 出て", a);

      // const unsubscribe = onSnapshot(a, (querySnapshot) => { // 'q' を 'a' に変更
      //   const updatedData: GraveData[] = []; // GraveData[]型を指定
      //   querySnapshot.forEach((doc) => {
      //     // doc.data()にデータ、doc.idにドキュメントIDが含まれる
      //     const dataG: GraveData = { id: doc.id, ...doc.data() } as GraveData; // idも含めるようにする (deleteする時に使う)
      //     updatedData.push(dataG);
      //   });
      //   setGraves(updatedData);
      //   console.log("updatedData 出て", updatedData);
      // });

      // console.log("graves 出て", graves);


      // const q = query(userGravesRef, orderBy('date', 'asc')); // 追加: 日付でソート
      // const unsubscribe = onSnapshot(q, (querySnapshot) => {
      //   const updatedGraves: GraveData[] = [];
      //   querySnapshot.forEach((doc) => {
      //     const dataWithId = { id: doc.id, ...doc.data() } as GraveData; // idも含める
      //     updatedGraves.push(dataWithId);
      //   });
      //   setGraves(updatedGraves); // ステートを更新
      //   console.log("Updated graves:", updatedGraves); // データ取得後にログ出力
      //   console.log("Updated graves:", graves); // データ取得後にログ出力
      // });

      if (user) {
        fetchGraves(); // ユーザーが存在する場合に呼び出す
      }

      // クリーンアップ関数: コンポーネントがアンマウントされるときにリスナーを解除
      // return () => unsubscribe();
    }
  }, [user]); // userが変更されたときに実行

  const addGrave = async (data: Omit<GraveData, 'userId'>) => {
    if (!user) return;

    const graveData: GraveData = {
      ...data,
      userId: user.uid,
    };

    const userGravesRef = collection(db, 'users', user.uid, 'graves'); // コレクションのパスを修正
    await addDoc(userGravesRef, graveData);
  };

  return (
    <GraveContext.Provider value={{ addGrave, graves }}>
      {children}
    </GraveContext.Provider>
  );
};

// useGraveフックの定義
export const useGrave = (): GraveContextType => {
  const context = useContext(GraveContext);
  if (!context) {
    throw new Error('useGrave must be used within a GraveProvider');
  }
  return context;
};
